(function() {
    'use strict';

    angular
        .module('app.main.mentorship')
        .controller('CalendarController', CalendarController);

    function CalendarController(MentorshipService, $localStorage, $scope, $mdDialog, $mdToast, $filter, $element, triLayout, triTheming, uiCalendarConfig) {
        var vm = this;
        vm.currentUser = $localStorage.currentUser;
        vm.eventSources = [{
            events: []
        }];
        console.log(vm.eventSources);
        
        function getAppoint(mID) {
            MentorshipService.getAppoint(mID).then(function(response) {
                vm.appointList = response.data;
            });
        }

        function getAllMeeting(mID) {
            MentorshipService.getAllMeeting(mID).then(function(response) {
                vm.meetings = response.data;
                console.log(vm.meetings);

            for (var i=0; i <= vm.meetings.length; i++){
                var randomPalette = pickRandomProperty(triTheming.palettes);
                var inAnHour = moment(vm.meetings[i].dt).add(1, 'h');
                vm.eventSources[0].events.push({
                    title: vm.meetings[i].topic,
                    start: moment(vm.meetings[i].dt),
                    end: inAnHour,
                    description: vm.meetings[i].reminder,
                    location: vm.meetings[i].location,
                    backgroundColor: triTheming.rgba(triTheming.palettes[randomPalette]['500'].value),
                    borderColor: triTheming.rgba(triTheming.palettes[randomPalette]['500'].value),
                    textColor: triTheming.rgba(triTheming.palettes[randomPalette]['500'].contrast),
                    palette: randomPalette

                });
            }
            });
        }

        getAppoint(vm.currentUser.accountID);
        getAllMeeting(vm.currentUser.accountID);

        vm.calendarOptions = {
            contentHeight: 'auto',
            selectable: true,
            editable: true,
            viewRender: function(view) {
                // change day
                vm.currentDay = view.calendar.getDate();
                // update background image for month
                triLayout.layout.contentClass = 'calendar-background-image overlay-gradient-10 calendar-background-month-' + vm.currentDay.month();
            },

            dayClick: function(date, jsEvent, view) { //eslint-disable-line
                vm.currentDay = date;
            },

            eventClick: function(calEvent, jsEvent, view) { //eslint-disable-line
                $mdDialog.show({
                    controller: 'EventDialogController',
                    controllerAs: 'vm',
                    templateUrl: 'app/page/mentorship/calendar/event-dialog.html',
                    targetEvent: jsEvent,
                    focusOnOpen: false,
                    locals: {
                        dialogData: {
                            title: 'Edit Event',
                            confirmButtonText: 'Save'
                        },
                        event: calEvent,
                        edit: true
                    }
                })
                .then(function(event) {
                    var toastMessage = 'Event Updated';
                    if(angular.isDefined(event.deleteMe) && event.deleteMe === true) {
                        // remove the event from the calendar
                        uiCalendarConfig.calendars['triangular-calendar'].fullCalendar('removeEvents', event._id);
                        // change toast message
                        toastMessage = 'Event Deleted';
                    }
                    else {
                        // update event
                        uiCalendarConfig.calendars['triangular-calendar'].fullCalendar('updateEvent', event);
                    }

                    // pop a toast
                    $mdToast.show(
                        $mdToast.simple()
                        .content($filter('triTranslate')(toastMessage))
                        .position('bottom right')
                        .hideDelay(2000)
                    );
                });
            }
        };

        function pickRandomProperty(obj) {
            var result;
            var count = 0;
            for (var prop in obj) {
                if (Math.random() < 1/++count) {
                    result = prop;
                }
            }
            return result;
        }
    }
})();